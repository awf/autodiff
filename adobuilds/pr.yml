resources:
- repo: self
  clean: true
  
trigger: none # disable CI build

pr:
- master

jobs:
- job: 'Linux'
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - script: |
        docker build -t adb-docker $(Build.Repository.LocalPath)
      displayName: Build Docker Container
    
    - script: |
        docker run -v $(Common.TestResultsDirectory):/adb/build/Testing/ adb-docker -t --output-on-failure -T test
      displayName: Run Tests (ctest)
      continueOnError: true

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'cTest'
        testResultsFiles: '**/Test.xml' 
        searchFolder: '$(Common.TestResultsDirectory)'
        failTaskOnFailedTests: true
      displayName: Publish CTest Results
      condition: succeededOrFailed()

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/*.trx' 
        searchFolder: '$(Common.TestResultsDirectory)'
        failTaskOnFailedTests: true
      displayName: Publish .NET Test Results
      condition: succeededOrFailed()
    
    - script: |
        docker run -v $(Build.ArtifactStagingDirectory):/adb/tmp/ adb-docker -r "-gmm_d_vals_param @(2,10) -gmm_k_vals_param @(5,10) -ba_max_n 1 -hand_max_n 1 -lstm_l_vals @(2) -lstm_c_vals @(1024)"
      displayName: Run Benchmark Subset
    
    - script: |
        docker run -v $(Build.ArtifactStagingDirectory):/adb/tmp/ adb-docker -p --save
      displayName: Produce Plots
    
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: PlotsAndData