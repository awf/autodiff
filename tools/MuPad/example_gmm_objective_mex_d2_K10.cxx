// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

#line 2 "au_autodiff_generate_template.cpp"
#include <math.h>

#include "au_mex.h"

// Autogenerated by au_ccode
// FROM: f
// au_autodiff_template.cpp - outline code for au_autodiff*
// awf@microsoft.com, Dec 13

void mlx_function(mlx_inputs& ins, mlx_outputs& outs)
{
    mlx_array<mlx_double> in(ins[0]);
    mlx_array<mlx_double> data(ins[1]);
    mlx_array<mlx_logical> jacobian(ins[2]);
    bool do_jacobian = jacobian[0];

    mlx_assert(in.cols == data.cols);
    mlx_assert(in.rows == 60);
    mlx_assert(data.rows == 5);

    mwSize out_rows = 1 + (do_jacobian ? 60 : 0);
    mwSize out_cols = 1 * in.cols;
    mlx_make_array<mlx_double> out(out_rows, out_cols);

    double const* in_ptr = in.data;
    double const* data_ptr = data.data;
    double* out_ptr = out.data;

    if (do_jacobian) {
        // const mwSize out_rows = 60 + 1;
        const mwSize out_step = (60 + 1) * 1;
        for(mwSize c_in = 0; c_in < in.cols; ++c_in,
                in_ptr += in.rows,
                data_ptr += data.rows,
                out_ptr += out_step) {
              /* inner loop do_jac=1 */
    double x1 = in_ptr[0];
    double x2 = in_ptr[1];
    double x3 = in_ptr[2];
    double x4 = in_ptr[3];
    double x5 = in_ptr[4];
    double x6 = in_ptr[5];
    double x7 = in_ptr[6];
    double x8 = in_ptr[7];
    double x9 = in_ptr[8];
    double x10 = in_ptr[9];
    double x11 = in_ptr[10];
    double x12 = in_ptr[11];
    double x13 = in_ptr[12];
    double x14 = in_ptr[13];
    double x15 = in_ptr[14];
    double x16 = in_ptr[15];
    double x17 = in_ptr[16];
    double x18 = in_ptr[17];
    double x19 = in_ptr[18];
    double x20 = in_ptr[19];
    double x21 = in_ptr[20];
    double x22 = in_ptr[21];
    double x23 = in_ptr[22];
    double x24 = in_ptr[23];
    double x25 = in_ptr[24];
    double x26 = in_ptr[25];
    double x27 = in_ptr[26];
    double x28 = in_ptr[27];
    double x29 = in_ptr[28];
    double x30 = in_ptr[29];
    double x31 = in_ptr[30];
    double x32 = in_ptr[31];
    double x33 = in_ptr[32];
    double x34 = in_ptr[33];
    double x35 = in_ptr[34];
    double x36 = in_ptr[35];
    double x37 = in_ptr[36];
    double x38 = in_ptr[37];
    double x39 = in_ptr[38];
    double x40 = in_ptr[39];
    double x41 = in_ptr[40];
    double x42 = in_ptr[41];
    double x43 = in_ptr[42];
    double x44 = in_ptr[43];
    double x45 = in_ptr[44];
    double x46 = in_ptr[45];
    double x47 = in_ptr[46];
    double x48 = in_ptr[47];
    double x49 = in_ptr[48];
    double x50 = in_ptr[49];
    double x51 = in_ptr[50];
    double x52 = in_ptr[51];
    double x53 = in_ptr[52];
    double x54 = in_ptr[53];
    double x55 = in_ptr[54];
    double x56 = in_ptr[55];
    double x57 = in_ptr[56];
    double x58 = in_ptr[57];
    double x59 = in_ptr[58];
    double x60 = in_ptr[59];
    double data1 = data_ptr[0];
    double data2 = data_ptr[1];
    double data3 = data_ptr[2];
    double data4 = data_ptr[3];
    double data5 = data_ptr[4];
    double t3 = data1-x11;
    double t42 = exp(x32);
    double t52 = t3*x33;
    double t53 = data2-x12;
    double t54 = t42*t53;
    double t2 = t52+t54;
    double t5 = data1-x13;
    double t43 = exp(x35);
    double t61 = t5*x36;
    double t62 = data2-x14;
    double t63 = t43*t62;
    double t4 = t61+t63;
    double t7 = data1-x15;
    double t44 = exp(x38);
    double t68 = t7*x39;
    double t69 = data2-x16;
    double t70 = t44*t69;
    double t6 = t68+t70;
    double t9 = data1-x17;
    double t45 = exp(x41);
    double t75 = t9*x42;
    double t76 = data2-x18;
    double t77 = t45*t76;
    double t8 = t75+t77;
    double t11 = data1-x19;
    double t46 = exp(x44);
    double t82 = t11*x45;
    double t83 = data2-x20;
    double t84 = t46*t83;
    double t10 = t82+t84;
    double t13 = data1-x21;
    double t47 = exp(x47);
    double t89 = t13*x48;
    double t90 = data2-x22;
    double t91 = t47*t90;
    double t12 = t89+t91;
    double t15 = data1-x23;
    double t48 = exp(x50);
    double t96 = t15*x51;
    double t97 = data2-x24;
    double t98 = t48*t97;
    double t14 = t96+t98;
    double t17 = data1-x25;
    double t49 = exp(x53);
    double t103 = t17*x54;
    double t104 = data2-x26;
    double t105 = t49*t104;
    double t16 = t103+t105;
    double t19 = data1-x27;
    double t50 = exp(x56);
    double t110 = t19*x57;
    double t111 = data2-x28;
    double t112 = t50*t111;
    double t18 = t110+t112;
    double t21 = data1-x29;
    double t51 = exp(x59);
    double t117 = t21*x60;
    double t118 = data2-x30;
    double t119 = t51*t118;
    double t20 = t117+t119;
    double t22 = x31*2.0;
    double t23 = exp(t22);
    double t24 = x34*2.0;
    double t25 = exp(t24);
    double t26 = x37*2.0;
    double t27 = exp(t26);
    double t28 = x40*2.0;
    double t29 = exp(t28);
    double t30 = x43*2.0;
    double t31 = exp(t30);
    double t32 = x46*2.0;
    double t33 = exp(t32);
    double t34 = x49*2.0;
    double t35 = exp(t34);
    double t36 = x52*2.0;
    double t37 = exp(t36);
    double t38 = x55*2.0;
    double t39 = exp(t38);
    double t40 = x58*2.0;
    double t41 = exp(t40);
    double t55 = t2*t2;
    double t56 = t3*t3;
    double t59 = t55*(1.0/2.0);
    double t60 = t23*t56*(1.0/2.0);
    double t57 = -data3-t59-t60+x1+x31+x32;
    double t58 = exp(t57);
    double t64 = t4*t4;
    double t65 = t5*t5;
    double t136 = t64*(1.0/2.0);
    double t137 = t25*t65*(1.0/2.0);
    double t66 = -data3-t136-t137+x2+x34+x35;
    double t67 = exp(t66);
    double t71 = t6*t6;
    double t72 = t7*t7;
    double t138 = t71*(1.0/2.0);
    double t139 = t27*t72*(1.0/2.0);
    double t73 = -data3-t138-t139+x3+x37+x38;
    double t74 = exp(t73);
    double t78 = t8*t8;
    double t79 = t9*t9;
    double t140 = t78*(1.0/2.0);
    double t141 = t29*t79*(1.0/2.0);
    double t80 = -data3-t140-t141+x4+x40+x41;
    double t81 = exp(t80);
    double t85 = t10*t10;
    double t86 = t11*t11;
    double t142 = t85*(1.0/2.0);
    double t143 = t31*t86*(1.0/2.0);
    double t87 = -data3-t142-t143+x5+x43+x44;
    double t88 = exp(t87);
    double t92 = t12*t12;
    double t93 = t13*t13;
    double t144 = t92*(1.0/2.0);
    double t145 = t33*t93*(1.0/2.0);
    double t94 = -data3-t144-t145+x6+x46+x47;
    double t95 = exp(t94);
    double t99 = t14*t14;
    double t100 = t15*t15;
    double t146 = t99*(1.0/2.0);
    double t147 = t35*t100*(1.0/2.0);
    double t101 = -data3-t146-t147+x7+x49+x50;
    double t102 = exp(t101);
    double t106 = t16*t16;
    double t107 = t17*t17;
    double t148 = t106*(1.0/2.0);
    double t149 = t37*t107*(1.0/2.0);
    double t108 = -data3-t148-t149+x8+x52+x53;
    double t109 = exp(t108);
    double t113 = t18*t18;
    double t114 = t19*t19;
    double t150 = t113*(1.0/2.0);
    double t151 = t39*t114*(1.0/2.0);
    double t115 = -data3-t150-t151+x9+x55+x56;
    double t116 = exp(t115);
    double t120 = t20*t20;
    double t121 = t21*t21;
    double t152 = t120*(1.0/2.0);
    double t153 = t41*t121*(1.0/2.0);
    double t122 = -data3-t152-t153+x10+x58+x59;
    double t123 = exp(t122);
    double t124 = t58+t67+t74+t81+t88+t95+t102+t109+t116+t123;
    double t125 = exp(x1);
    double t126 = exp(x2);
    double t127 = exp(x3);
    double t128 = exp(x4);
    double t129 = exp(x5);
    double t130 = exp(x6);
    double t131 = exp(x7);
    double t132 = exp(x8);
    double t133 = exp(x9);
    double t134 = exp(x10);
    double t135 = t125+t126+t127+t128+t129+t130+t131+t132+t133+t134;
    double t154 = 1.0/t124;
    double t155 = 1.0/t135;
    double t156 = data1*2.0;
    double t157 = exp(x31);
    double t158 = x32*2.0;
    double t159 = exp(t158);
    double t160 = exp(x34);
    double t161 = x35*2.0;
    double t162 = exp(t161);
    double t163 = exp(x37);
    double t164 = x38*2.0;
    double t165 = exp(t164);
    double t166 = exp(x40);
    double t167 = x41*2.0;
    double t168 = exp(t167);
    double t169 = exp(x43);
    double t170 = x44*2.0;
    double t171 = exp(t170);
    double t172 = exp(x46);
    double t173 = x47*2.0;
    double t174 = exp(t173);
    double t175 = exp(x49);
    double t176 = x50*2.0;
    double t177 = exp(t176);
    double t178 = exp(x52);
    double t179 = x53*2.0;
    double t180 = exp(t179);
    double t181 = exp(x55);
    double t182 = x56*2.0;
    double t183 = exp(t182);
    double t184 = exp(x58);
    double t185 = x59*2.0;
    double t186 = exp(t185);
  out_ptr[0] = data3+log(t124)-log(t135)-data5*(t42+t157)-data5*(t43+t160)-data5*(t44+t163)-data5*(t45+t166)-data5*(t46+t169)-data5*(t47+t172)-data5*(t48+t175)-data5*(t49+t178)-data5*(t50+t181)-data5*(t51+t184)+data4*(t23+t159+x33*x33)+data4*(t25+t162+x36*x36)+data4*(t27+t165+x39*x39)+data4*(t29+t168+x42*x42)+data4*(t31+t171+x45*x45)+data4*(t33+t174+x48*x48)+data4*(t35+t177+x51*x51)+data4*(t37+t180+x54*x54)+data4*(t39+t183+x57*x57)+data4*(t41+t186+x60*x60);
  out_ptr[1] = t58*t154-t125*t155;
  out_ptr[2] = t67*t154-t126*t155;
  out_ptr[3] = t74*t154-t127*t155;
  out_ptr[4] = t81*t154-t128*t155;
  out_ptr[5] = t88*t154-t129*t155;
  out_ptr[6] = t95*t154-t130*t155;
  out_ptr[7] = t102*t154-t131*t155;
  out_ptr[8] = t109*t154-t132*t155;
  out_ptr[9] = t116*t154-t133*t155;
  out_ptr[10] = t123*t154-t134*t155;
  out_ptr[11] = t58*t154*(t2*x33+t23*(t156-x11*2.0)*(1.0/2.0));
  out_ptr[12] = t2*t42*t58*t154;
  out_ptr[13] = t67*t154*(t4*x36+t25*(t156-x13*2.0)*(1.0/2.0));
  out_ptr[14] = t4*t43*t67*t154;
  out_ptr[15] = t74*t154*(t6*x39+t27*(t156-x15*2.0)*(1.0/2.0));
  out_ptr[16] = t6*t44*t74*t154;
  out_ptr[17] = t81*t154*(t8*x42+t29*(t156-x17*2.0)*(1.0/2.0));
  out_ptr[18] = t8*t45*t81*t154;
  out_ptr[19] = t88*t154*(t10*x45+t31*(t156-x19*2.0)*(1.0/2.0));
  out_ptr[20] = t10*t46*t88*t154;
  out_ptr[21] = t95*t154*(t12*x48+t33*(t156-x21*2.0)*(1.0/2.0));
  out_ptr[22] = t12*t47*t95*t154;
  out_ptr[23] = t102*t154*(t14*x51+t35*(t156-x23*2.0)*(1.0/2.0));
  out_ptr[24] = t14*t48*t102*t154;
  out_ptr[25] = t109*t154*(t16*x54+t37*(t156-x25*2.0)*(1.0/2.0));
  out_ptr[26] = t16*t49*t109*t154;
  out_ptr[27] = t116*t154*(t18*x57+t39*(t156-x27*2.0)*(1.0/2.0));
  out_ptr[28] = t18*t50*t116*t154;
  out_ptr[29] = t123*t154*(t20*x60+t41*(t156-x29*2.0)*(1.0/2.0));
  out_ptr[30] = t20*t51*t123*t154;
  out_ptr[31] = data4*t23*2.0-data5*t157-t58*t154*(t23*t56-1.0);
  out_ptr[32] = -data5*t42+data4*t159*2.0-t58*t154*(t2*t42*t53-1.0);
  out_ptr[33] = data4*x33*2.0-t2*t3*t58*t154;
  out_ptr[34] = data4*t25*2.0-data5*t160-t67*t154*(t25*t65-1.0);
  out_ptr[35] = -data5*t43+data4*t162*2.0-t67*t154*(t4*t43*t62-1.0);
  out_ptr[36] = data4*x36*2.0-t4*t5*t67*t154;
  out_ptr[37] = data4*t27*2.0-data5*t163-t74*t154*(t27*t72-1.0);
  out_ptr[38] = -data5*t44+data4*t165*2.0-t74*t154*(t6*t44*t69-1.0);
  out_ptr[39] = data4*x39*2.0-t6*t7*t74*t154;
  out_ptr[40] = data4*t29*2.0-data5*t166-t81*t154*(t29*t79-1.0);
  out_ptr[41] = -data5*t45+data4*t168*2.0-t81*t154*(t8*t45*t76-1.0);
  out_ptr[42] = data4*x42*2.0-t8*t9*t81*t154;
  out_ptr[43] = data4*t31*2.0-data5*t169-t88*t154*(t31*t86-1.0);
  out_ptr[44] = -data5*t46+data4*t171*2.0-t88*t154*(t10*t46*t83-1.0);
  out_ptr[45] = data4*x45*2.0-t10*t11*t88*t154;
  out_ptr[46] = data4*t33*2.0-data5*t172-t95*t154*(t33*t93-1.0);
  out_ptr[47] = -data5*t47+data4*t174*2.0-t95*t154*(t12*t47*t90-1.0);
  out_ptr[48] = data4*x48*2.0-t12*t13*t95*t154;
  out_ptr[49] = data4*t35*2.0-data5*t175-t102*t154*(t35*t100-1.0);
  out_ptr[50] = -data5*t48+data4*t177*2.0-t102*t154*(t14*t48*t97-1.0);
  out_ptr[51] = data4*x51*2.0-t14*t15*t102*t154;
  out_ptr[52] = data4*t37*2.0-data5*t178-t109*t154*(t37*t107-1.0);
  out_ptr[53] = -data5*t49+data4*t180*2.0-t109*t154*(t16*t49*t104-1.0);
  out_ptr[54] = data4*x54*2.0-t16*t17*t109*t154;
  out_ptr[55] = data4*t39*2.0-data5*t181-t116*t154*(t39*t114-1.0);
  out_ptr[56] = -data5*t50+data4*t183*2.0-t116*t154*(t18*t50*t111-1.0);
  out_ptr[57] = data4*x57*2.0-t18*t19*t116*t154;
  out_ptr[58] = data4*t41*2.0-data5*t184-t123*t154*(t41*t121-1.0);
  out_ptr[59] = -data5*t51+data4*t186*2.0-t123*t154*(t20*t51*t118-1.0);
  out_ptr[60] = data4*x60*2.0-t20*t21*t123*t154;

#line 39 "au_autodiff_generate_template.cpp"
        }
    } else {
        const mwSize out_step = 1;
        for(mwSize c_in = 0; c_in < in.cols; ++c_in,
                in_ptr += in.rows,
                data_ptr += data.rows,
                out_ptr += out_step) {
              /* inner loop do_jac=0 */
    double x1 = in_ptr[0];
    double x2 = in_ptr[1];
    double x3 = in_ptr[2];
    double x4 = in_ptr[3];
    double x5 = in_ptr[4];
    double x6 = in_ptr[5];
    double x7 = in_ptr[6];
    double x8 = in_ptr[7];
    double x9 = in_ptr[8];
    double x10 = in_ptr[9];
    double x11 = in_ptr[10];
    double x12 = in_ptr[11];
    double x13 = in_ptr[12];
    double x14 = in_ptr[13];
    double x15 = in_ptr[14];
    double x16 = in_ptr[15];
    double x17 = in_ptr[16];
    double x18 = in_ptr[17];
    double x19 = in_ptr[18];
    double x20 = in_ptr[19];
    double x21 = in_ptr[20];
    double x22 = in_ptr[21];
    double x23 = in_ptr[22];
    double x24 = in_ptr[23];
    double x25 = in_ptr[24];
    double x26 = in_ptr[25];
    double x27 = in_ptr[26];
    double x28 = in_ptr[27];
    double x29 = in_ptr[28];
    double x30 = in_ptr[29];
    double x31 = in_ptr[30];
    double x32 = in_ptr[31];
    double x33 = in_ptr[32];
    double x34 = in_ptr[33];
    double x35 = in_ptr[34];
    double x36 = in_ptr[35];
    double x37 = in_ptr[36];
    double x38 = in_ptr[37];
    double x39 = in_ptr[38];
    double x40 = in_ptr[39];
    double x41 = in_ptr[40];
    double x42 = in_ptr[41];
    double x43 = in_ptr[42];
    double x44 = in_ptr[43];
    double x45 = in_ptr[44];
    double x46 = in_ptr[45];
    double x47 = in_ptr[46];
    double x48 = in_ptr[47];
    double x49 = in_ptr[48];
    double x50 = in_ptr[49];
    double x51 = in_ptr[50];
    double x52 = in_ptr[51];
    double x53 = in_ptr[52];
    double x54 = in_ptr[53];
    double x55 = in_ptr[54];
    double x56 = in_ptr[55];
    double x57 = in_ptr[56];
    double x58 = in_ptr[57];
    double x59 = in_ptr[58];
    double x60 = in_ptr[59];
    double data1 = data_ptr[0];
    double data2 = data_ptr[1];
    double data3 = data_ptr[2];
    double data4 = data_ptr[3];
    double data5 = data_ptr[4];
    double t3 = data1-x11;
    double t42 = exp(x32);
    double t2 = t3*x33+t42*(data2-x12);
    double t5 = data1-x13;
    double t43 = exp(x35);
    double t4 = t5*x36+t43*(data2-x14);
    double t7 = data1-x15;
    double t44 = exp(x38);
    double t6 = t7*x39+t44*(data2-x16);
    double t9 = data1-x17;
    double t45 = exp(x41);
    double t8 = t9*x42+t45*(data2-x18);
    double t11 = data1-x19;
    double t46 = exp(x44);
    double t10 = t11*x45+t46*(data2-x20);
    double t13 = data1-x21;
    double t47 = exp(x47);
    double t12 = t13*x48+t47*(data2-x22);
    double t15 = data1-x23;
    double t48 = exp(x50);
    double t14 = t15*x51+t48*(data2-x24);
    double t17 = data1-x25;
    double t49 = exp(x53);
    double t16 = t17*x54+t49*(data2-x26);
    double t19 = data1-x27;
    double t50 = exp(x56);
    double t18 = t19*x57+t50*(data2-x28);
    double t21 = data1-x29;
    double t51 = exp(x59);
    double t20 = t21*x60+t51*(data2-x30);
    double t22 = x31*2.0;
    double t23 = exp(t22);
    double t24 = x34*2.0;
    double t25 = exp(t24);
    double t26 = x37*2.0;
    double t27 = exp(t26);
    double t28 = x40*2.0;
    double t29 = exp(t28);
    double t30 = x43*2.0;
    double t31 = exp(t30);
    double t32 = x46*2.0;
    double t33 = exp(t32);
    double t34 = x49*2.0;
    double t35 = exp(t34);
    double t36 = x52*2.0;
    double t37 = exp(t36);
    double t38 = x55*2.0;
    double t39 = exp(t38);
    double t40 = x58*2.0;
    double t41 = exp(t40);
    out_ptr[0] = data3-log(exp(x1)+exp(x2)+exp(x3)+exp(x4)+exp(x5)+exp(x6)+exp(x7)+exp(x8)+exp(x9)+exp(x10))+log(exp(-data3+x1+x31+x32-(t3*t3)*t23*(1.0/2.0)-(t2*t2)*(1.0/2.0))+exp(-data3+x2+x34+x35-(t5*t5)*t25*(1.0/2.0)-(t4*t4)*(1.0/2.0))+exp(-data3+x3+x37+x38-(t7*t7)*t27*(1.0/2.0)-(t6*t6)*(1.0/2.0))+exp(-data3+x4+x40+x41-(t9*t9)*t29*(1.0/2.0)-(t8*t8)*(1.0/2.0))+exp(-data3+x5+x43+x44-(t11*t11)*t31*(1.0/2.0)-(t10*t10)*(1.0/2.0))+exp(-data3+x6+x46+x47-(t13*t13)*t33*(1.0/2.0)-(t12*t12)*(1.0/2.0))+exp(-data3+x7+x49+x50-(t15*t15)*t35*(1.0/2.0)-(t14*t14)*(1.0/2.0))+exp(-data3+x8+x52+x53-(t17*t17)*t37*(1.0/2.0)-(t16*t16)*(1.0/2.0))+exp(-data3+x9+x55+x56-(t19*t19)*t39*(1.0/2.0)-(t18*t18)*(1.0/2.0))+exp(-data3+x10+x58+x59-(t21*t21)*t41*(1.0/2.0)-(t20*t20)*(1.0/2.0)))-data5*(t42+exp(x31))-data5*(t43+exp(x34))-data5*(t44+exp(x37))-data5*(t45+exp(x40))-data5*(t46+exp(x43))-data5*(t47+exp(x46))-data5*(t48+exp(x49))-data5*(t49+exp(x52))-data5*(t50+exp(x55))-data5*(t51+exp(x58))+data4*(t23+exp(x32*2.0)+x33*x33)+data4*(t25+exp(x35*2.0)+x36*x36)+data4*(t27+exp(x38*2.0)+x39*x39)+data4*(t29+exp(x41*2.0)+x42*x42)+data4*(t31+exp(x44*2.0)+x45*x45)+data4*(t33+exp(x47*2.0)+x48*x48)+data4*(t35+exp(x50*2.0)+x51*x51)+data4*(t37+exp(x53*2.0)+x54*x54)+data4*(t39+exp(x56*2.0)+x57*x57)+data4*(t41+exp(x59*2.0)+x60*x60);

#line 48 "au_autodiff_generate_template.cpp"
        }
    }
    
    outs[0] = out;
}
