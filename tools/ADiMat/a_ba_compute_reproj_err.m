% Copyright (c) Microsoft Corporation.
% Licensed under the MIT license.

% Generated by ADiMat 0.6.0-4975
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2015 Johannes Willkomm <johannes@johannes-willkomm.de>
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to adimat-users@lists.sc.informatik.tu-darmstadt.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Parameters:
%  - dependents=err
%  - independents=cam, X, w
%  - inputEncoding=ISO-8859-1
%
% Functions in this file: a_ba_compute_reproj_err, rec_ba_compute_reproj_err,
%  ret_ba_compute_reproj_err, a_rodrigues_rotate_point, rec_rodrigues_rotate_point,
%  ret_rodrigues_rotate_point, rodrigues_rotate_point, a_radial_distort,
%  rec_radial_distort, ret_radial_distort, radial_distort
%

function [a_cam a_X a_w nr_err] = a_ba_compute_reproj_err(cam, X, w, feat, a_err)
   i_rot = 1 : 3;
   i_C = 4 : 6;
   i_f = 7;
   i_princ_pt = 8 : 9;
   i_rad_params = 10 : 11;
   Xo = X - cam(i_C);
   Xcam = rec_rodrigues_rotate_point(cam(i_rot), Xo);
   Xcam_e = Xcam(1 : end-1) / Xcam(end);
   distorted = rec_radial_distort(cam(i_rad_params), Xcam_e);
   tmpca1 = distorted * cam(i_f);
   proj = tmpca1 + cam(i_princ_pt);
   adimat_push1(tmpca1);
   tmpca1 = proj - feat;
   err = w * tmpca1;
   nr_err = err;
   [a_Xo a_Xcam a_Xcam_e a_distorted a_proj a_tmpca1 a_cam a_X a_w] = a_zeros(Xo, Xcam, Xcam_e, distorted, proj, tmpca1, cam, X, w);
   if nargin < 5
      a_err = a_zeros1(err);
   end
   a_w = adimat_adjsum(a_w, adimat_adjmultl(w, a_err, tmpca1));
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultr(tmpca1, w, a_err));
   tmpca1 = adimat_pop1;
   a_proj = adimat_adjsum(a_proj, adimat_adjred(proj, a_tmpca1));
   a_tmpca1 = a_zeros1(tmpca1);
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_proj));
   a_cam(i_princ_pt) = adimat_adjsum(a_cam(i_princ_pt), adimat_adjred(cam(i_princ_pt), a_proj));
   a_distorted = adimat_adjsum(a_distorted, adimat_adjmultl(distorted, a_tmpca1, cam(i_f)));
   a_cam(i_f) = adimat_adjsum(a_cam(i_f), adimat_adjmultr(cam(i_f), distorted, a_tmpca1));
   [tmpadjc1 tmpadjc2] = ret_radial_distort(a_distorted);
   a_cam(i_rad_params) = adimat_adjsum(a_cam(i_rad_params), tmpadjc1);
   a_Xcam_e = adimat_adjsum(a_Xcam_e, tmpadjc2);
   [tmpadjc1 tmpadjc2] = adimat_a_mrdivide(Xcam(1 : end-1), Xcam(end), a_Xcam_e);
   a_Xcam(1 : end-1) = adimat_adjsum(a_Xcam(1 : end-1), tmpadjc1);
   a_Xcam(end) = adimat_adjsum(a_Xcam(end), tmpadjc2);
   [tmpadjc1 tmpadjc2] = ret_rodrigues_rotate_point(a_Xcam);
   a_cam(i_rot) = adimat_adjsum(a_cam(i_rot), tmpadjc1);
   a_Xo = adimat_adjsum(a_Xo, tmpadjc2);
   a_X = adimat_adjsum(a_X, adimat_adjred(X, a_Xo));
   a_cam(i_C) = adimat_adjsum(a_cam(i_C), adimat_adjred(cam(i_C), -a_Xo));
end

function err = rec_ba_compute_reproj_err(cam, X, w, feat)
   i_rot = 1 : 3;
   i_C = 4 : 6;
   i_f = 7;
   i_princ_pt = 8 : 9;
   i_rad_params = 10 : 11;
   Xo = X - cam(i_C);
   Xcam = rec_rodrigues_rotate_point(cam(i_rot), Xo);
   Xcam_e = Xcam(1 : end-1) / Xcam(end);
   distorted = rec_radial_distort(cam(i_rad_params), Xcam_e);
   tmpca1 = distorted * cam(i_f);
   proj = tmpca1 + cam(i_princ_pt);
   adimat_push1(tmpca1);
   tmpca1 = proj - feat;
   err = w * tmpca1;
   adimat_push(i_rot, i_C, i_f, i_princ_pt, i_rad_params, Xo, Xcam, Xcam_e, distorted, proj, tmpca1, err, cam, X, w);
   if nargin > 3
      adimat_push1(feat);
   end
   adimat_push1(nargin);
end

function [a_cam a_X a_w] = ret_ba_compute_reproj_err(a_err)
   tmpnargin = adimat_pop1;
   if tmpnargin > 3
      feat = adimat_pop1;
   end
   [w X cam err tmpca1 proj distorted Xcam_e Xcam Xo i_rad_params i_princ_pt i_f i_C i_rot] = adimat_pop;
   [a_Xo a_Xcam a_Xcam_e a_distorted a_proj a_tmpca1 a_cam a_X a_w] = a_zeros(Xo, Xcam, Xcam_e, distorted, proj, tmpca1, cam, X, w);
   if nargin < 1
      a_err = a_zeros1(err);
   end
   a_w = adimat_adjsum(a_w, adimat_adjmultl(w, a_err, tmpca1));
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultr(tmpca1, w, a_err));
   tmpca1 = adimat_pop1;
   a_proj = adimat_adjsum(a_proj, adimat_adjred(proj, a_tmpca1));
   a_tmpca1 = a_zeros1(tmpca1);
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_proj));
   a_cam(i_princ_pt) = adimat_adjsum(a_cam(i_princ_pt), adimat_adjred(cam(i_princ_pt), a_proj));
   a_distorted = adimat_adjsum(a_distorted, adimat_adjmultl(distorted, a_tmpca1, cam(i_f)));
   a_cam(i_f) = adimat_adjsum(a_cam(i_f), adimat_adjmultr(cam(i_f), distorted, a_tmpca1));
   [tmpadjc1 tmpadjc2] = ret_radial_distort(a_distorted);
   a_cam(i_rad_params) = adimat_adjsum(a_cam(i_rad_params), tmpadjc1);
   a_Xcam_e = adimat_adjsum(a_Xcam_e, tmpadjc2);
   [tmpadjc1 tmpadjc2] = adimat_a_mrdivide(Xcam(1 : end-1), Xcam(end), a_Xcam_e);
   a_Xcam(1 : end-1) = adimat_adjsum(a_Xcam(1 : end-1), tmpadjc1);
   a_Xcam(end) = adimat_adjsum(a_Xcam(end), tmpadjc2);
   [tmpadjc1 tmpadjc2] = ret_rodrigues_rotate_point(a_Xcam);
   a_cam(i_rot) = adimat_adjsum(a_cam(i_rot), tmpadjc1);
   a_Xo = adimat_adjsum(a_Xo, tmpadjc2);
   a_X = adimat_adjsum(a_X, adimat_adjred(X, a_Xo));
   a_cam(i_C) = adimat_adjsum(a_cam(i_C), adimat_adjred(cam(i_C), -a_Xo));
end

function [a_rot a_pt nr_rotatedPt] = a_rodrigues_rotate_point(rot, pt, a_rotatedPt)
   tmpca2 = 0;
   tmpca3 = 0;
   rotatedPt = 0;
   theta = 0;
   costheta = 0;
   sintheta = 0;
   theta_inverse = 0;
   w = 0;
   w_cross_pt = 0;
   tmp = 0;
   rot_cross_pt = 0;
   tmpca1 = rot .^ 2;
   sqtheta = sum(tmpca1);
   tmpba1 = 0;
   if sqtheta ~= 0
      tmpba1 = 1;
      adimat_push1(theta);
      theta = sqrt(sqtheta);
      adimat_push1(costheta);
      costheta = cos(theta);
      adimat_push1(sintheta);
      sintheta = sin(theta);
      adimat_push1(theta_inverse);
      theta_inverse = 1. / theta;
      adimat_push1(w);
      w = rot * theta_inverse;
      adimat_push1(w_cross_pt);
      w_cross_pt = cross(w, pt);
      adimat_push1(tmpca2);
      tmpca2 = w' * pt;
      adimat_push1(tmpca1);
      tmpca1 = 1. - costheta;
      adimat_push1(tmp);
      tmp = tmpca1 * tmpca2;
      adimat_push1(tmpca3);
      tmpca3 = tmp * w;
      adimat_push1(tmpca2);
      tmpca2 = sintheta * w_cross_pt;
      adimat_push1(tmpca1);
      tmpca1 = costheta * pt;
      adimat_push1(rotatedPt);
      rotatedPt = tmpca1 + tmpca2 + tmpca3;
   else
      adimat_push1(rot_cross_pt);
      rot_cross_pt = cross(rot, pt);
      adimat_push1(rotatedPt);
      rotatedPt = pt + rot_cross_pt;
   end
   adimat_push1(tmpba1);
   nr_rotatedPt = rotatedPt;
   [a_sqtheta a_theta a_costheta a_sintheta a_theta_inverse a_w a_w_cross_pt a_tmp a_rot_cross_pt a_tmpca1 a_tmpca2 a_tmpca3 a_rot a_pt] = a_zeros(sqtheta, theta, costheta, sintheta, theta_inverse, w, w_cross_pt, tmp, rot_cross_pt, tmpca1, tmpca2, tmpca3, rot, pt);
   if nargin < 3
      a_rotatedPt = a_zeros1(rotatedPt);
   end
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      rotatedPt = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_rotatedPt));
      a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjred(tmpca2, a_rotatedPt));
      a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, a_rotatedPt));
      a_rotatedPt = a_zeros1(rotatedPt);
      tmpca1 = adimat_pop1;
      a_costheta = adimat_adjsum(a_costheta, adimat_adjmultl(costheta, a_tmpca1, pt));
      a_pt = adimat_adjsum(a_pt, adimat_adjmultr(pt, costheta, a_tmpca1));
      a_tmpca1 = a_zeros1(tmpca1);
      tmpca2 = adimat_pop1;
      a_sintheta = adimat_adjsum(a_sintheta, adimat_adjmultl(sintheta, a_tmpca2, w_cross_pt));
      a_w_cross_pt = adimat_adjsum(a_w_cross_pt, adimat_adjmultr(w_cross_pt, sintheta, a_tmpca2));
      a_tmpca2 = a_zeros1(tmpca2);
      tmpca3 = adimat_pop1;
      a_tmp = adimat_adjsum(a_tmp, adimat_adjmultl(tmp, a_tmpca3, w));
      a_w = adimat_adjsum(a_w, adimat_adjmultr(w, tmp, a_tmpca3));
      a_tmpca3 = a_zeros1(tmpca3);
      tmp = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultl(tmpca1, a_tmp, tmpca2));
      a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultr(tmpca2, tmpca1, a_tmp));
      a_tmp = a_zeros1(tmp);
      tmpca1 = adimat_pop1;
      a_costheta = adimat_adjsum(a_costheta, adimat_adjred(costheta, -a_tmpca1));
      a_tmpca1 = a_zeros1(tmpca1);
      tmpca2 = adimat_pop1;
      a_w = adimat_adjsum(a_w, a_ctranspose(adimat_adjmultl(w', a_tmpca2, pt), w));
      a_pt = adimat_adjsum(a_pt, adimat_adjmultr(pt, w', a_tmpca2));
      a_tmpca2 = a_zeros1(tmpca2);
      w_cross_pt = adimat_pop1;
      a_w = adimat_adjsum(a_w, a_cross(a_w_cross_pt, 1, w, pt));
      a_pt = adimat_adjsum(a_pt, a_cross(a_w_cross_pt, 2, w, pt));
      a_w_cross_pt = a_zeros1(w_cross_pt);
      w = adimat_pop1;
      a_rot = adimat_adjsum(a_rot, adimat_adjmultl(rot, a_w, theta_inverse));
      a_theta_inverse = adimat_adjsum(a_theta_inverse, adimat_adjmultr(theta_inverse, rot, a_w));
      a_w = a_zeros1(w);
      [tmpadjc2] = adimat_a_mrdivider(1., theta, a_theta_inverse);
      theta_inverse = adimat_pop1;
      a_theta = adimat_adjsum(a_theta, tmpadjc2);
      a_theta_inverse = a_zeros1(theta_inverse);
      sintheta = adimat_pop1;
      a_theta = adimat_adjsum(a_theta, cos(theta) .* a_sintheta);
      a_sintheta = a_zeros1(sintheta);
      costheta = adimat_pop1;
      a_theta = adimat_adjsum(a_theta, -sin(theta) .* a_costheta);
      a_costheta = a_zeros1(costheta);
      theta = adimat_pop1;
      a_sqtheta = adimat_adjsum(a_sqtheta, 0.5 .* a_theta./sqrt(sqtheta));
      a_theta = a_zeros1(theta);
   else
      rotatedPt = adimat_pop1;
      a_pt = adimat_adjsum(a_pt, adimat_adjred(pt, a_rotatedPt));
      a_rot_cross_pt = adimat_adjsum(a_rot_cross_pt, adimat_adjred(rot_cross_pt, a_rotatedPt));
      a_rotatedPt = a_zeros1(rotatedPt);
      rot_cross_pt = adimat_pop1;
      a_rot = adimat_adjsum(a_rot, a_cross(a_rot_cross_pt, 1, rot, pt));
      a_pt = adimat_adjsum(a_pt, a_cross(a_rot_cross_pt, 2, rot, pt));
      a_rot_cross_pt = a_zeros1(rot_cross_pt);
   end
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_sum(a_sqtheta, tmpca1));
   a_rot = adimat_adjsum(a_rot, adimat_adjred(rot, 2 .* rot.^1 .* a_tmpca1));
end

function rotatedPt = rec_rodrigues_rotate_point(rot, pt)
   tmpca2 = 0;
   tmpca3 = 0;
   rotatedPt = 0;
   theta = 0;
   costheta = 0;
   sintheta = 0;
   theta_inverse = 0;
   w = 0;
   w_cross_pt = 0;
   tmp = 0;
   rot_cross_pt = 0;
   tmpca1 = rot .^ 2;
   sqtheta = sum(tmpca1);
   tmpba1 = 0;
   if sqtheta ~= 0
      tmpba1 = 1;
      adimat_push1(theta);
      theta = sqrt(sqtheta);
      adimat_push1(costheta);
      costheta = cos(theta);
      adimat_push1(sintheta);
      sintheta = sin(theta);
      adimat_push1(theta_inverse);
      theta_inverse = 1. / theta;
      adimat_push1(w);
      w = rot * theta_inverse;
      adimat_push1(w_cross_pt);
      w_cross_pt = cross(w, pt);
      adimat_push1(tmpca2);
      tmpca2 = w' * pt;
      adimat_push1(tmpca1);
      tmpca1 = 1. - costheta;
      adimat_push1(tmp);
      tmp = tmpca1 * tmpca2;
      adimat_push1(tmpca3);
      tmpca3 = tmp * w;
      adimat_push1(tmpca2);
      tmpca2 = sintheta * w_cross_pt;
      adimat_push1(tmpca1);
      tmpca1 = costheta * pt;
      adimat_push1(rotatedPt);
      rotatedPt = tmpca1 + tmpca2 + tmpca3;
   else
      adimat_push1(rot_cross_pt);
      rot_cross_pt = cross(rot, pt);
      adimat_push1(rotatedPt);
      rotatedPt = pt + rot_cross_pt;
   end
   adimat_push(tmpba1, sqtheta, theta, costheta, sintheta, theta_inverse, w, w_cross_pt, tmp, rot_cross_pt, tmpca1, tmpca2, tmpca3, rotatedPt, rot, pt);
end

function [a_rot a_pt] = ret_rodrigues_rotate_point(a_rotatedPt)
   [pt rot rotatedPt tmpca3 tmpca2 tmpca1 rot_cross_pt tmp w_cross_pt w theta_inverse sintheta costheta theta sqtheta] = adimat_pop;
   [a_sqtheta a_theta a_costheta a_sintheta a_theta_inverse a_w a_w_cross_pt a_tmp a_rot_cross_pt a_tmpca1 a_tmpca2 a_tmpca3 a_rot a_pt] = a_zeros(sqtheta, theta, costheta, sintheta, theta_inverse, w, w_cross_pt, tmp, rot_cross_pt, tmpca1, tmpca2, tmpca3, rot, pt);
   if nargin < 1
      a_rotatedPt = a_zeros1(rotatedPt);
   end
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      rotatedPt = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_rotatedPt));
      a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjred(tmpca2, a_rotatedPt));
      a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, a_rotatedPt));
      a_rotatedPt = a_zeros1(rotatedPt);
      tmpca1 = adimat_pop1;
      a_costheta = adimat_adjsum(a_costheta, adimat_adjmultl(costheta, a_tmpca1, pt));
      a_pt = adimat_adjsum(a_pt, adimat_adjmultr(pt, costheta, a_tmpca1));
      a_tmpca1 = a_zeros1(tmpca1);
      tmpca2 = adimat_pop1;
      a_sintheta = adimat_adjsum(a_sintheta, adimat_adjmultl(sintheta, a_tmpca2, w_cross_pt));
      a_w_cross_pt = adimat_adjsum(a_w_cross_pt, adimat_adjmultr(w_cross_pt, sintheta, a_tmpca2));
      a_tmpca2 = a_zeros1(tmpca2);
      tmpca3 = adimat_pop1;
      a_tmp = adimat_adjsum(a_tmp, adimat_adjmultl(tmp, a_tmpca3, w));
      a_w = adimat_adjsum(a_w, adimat_adjmultr(w, tmp, a_tmpca3));
      a_tmpca3 = a_zeros1(tmpca3);
      tmp = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultl(tmpca1, a_tmp, tmpca2));
      a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultr(tmpca2, tmpca1, a_tmp));
      a_tmp = a_zeros1(tmp);
      tmpca1 = adimat_pop1;
      a_costheta = adimat_adjsum(a_costheta, adimat_adjred(costheta, -a_tmpca1));
      a_tmpca1 = a_zeros1(tmpca1);
      tmpca2 = adimat_pop1;
      a_w = adimat_adjsum(a_w, a_ctranspose(adimat_adjmultl(w', a_tmpca2, pt), w));
      a_pt = adimat_adjsum(a_pt, adimat_adjmultr(pt, w', a_tmpca2));
      a_tmpca2 = a_zeros1(tmpca2);
      w_cross_pt = adimat_pop1;
      a_w = adimat_adjsum(a_w, a_cross(a_w_cross_pt, 1, w, pt));
      a_pt = adimat_adjsum(a_pt, a_cross(a_w_cross_pt, 2, w, pt));
      a_w_cross_pt = a_zeros1(w_cross_pt);
      w = adimat_pop1;
      a_rot = adimat_adjsum(a_rot, adimat_adjmultl(rot, a_w, theta_inverse));
      a_theta_inverse = adimat_adjsum(a_theta_inverse, adimat_adjmultr(theta_inverse, rot, a_w));
      a_w = a_zeros1(w);
      [tmpadjc2] = adimat_a_mrdivider(1., theta, a_theta_inverse);
      theta_inverse = adimat_pop1;
      a_theta = adimat_adjsum(a_theta, tmpadjc2);
      a_theta_inverse = a_zeros1(theta_inverse);
      sintheta = adimat_pop1;
      a_theta = adimat_adjsum(a_theta, cos(theta) .* a_sintheta);
      a_sintheta = a_zeros1(sintheta);
      costheta = adimat_pop1;
      a_theta = adimat_adjsum(a_theta, -sin(theta) .* a_costheta);
      a_costheta = a_zeros1(costheta);
      theta = adimat_pop1;
      a_sqtheta = adimat_adjsum(a_sqtheta, 0.5 .* a_theta./sqrt(sqtheta));
      a_theta = a_zeros1(theta);
   else
      rotatedPt = adimat_pop1;
      a_pt = adimat_adjsum(a_pt, adimat_adjred(pt, a_rotatedPt));
      a_rot_cross_pt = adimat_adjsum(a_rot_cross_pt, adimat_adjred(rot_cross_pt, a_rotatedPt));
      a_rotatedPt = a_zeros1(rotatedPt);
      rot_cross_pt = adimat_pop1;
      a_rot = adimat_adjsum(a_rot, a_cross(a_rot_cross_pt, 1, rot, pt));
      a_pt = adimat_adjsum(a_pt, a_cross(a_rot_cross_pt, 2, rot, pt));
      a_rot_cross_pt = a_zeros1(rot_cross_pt);
   end
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_sum(a_sqtheta, tmpca1));
   a_rot = adimat_adjsum(a_rot, adimat_adjred(rot, 2 .* rot.^1 .* a_tmpca1));
end

function rotatedPt = rodrigues_rotate_point(rot, pt)
   tmpca2 = 0;
   tmpca3 = 0;
   rotatedPt = 0;
   theta = 0;
   costheta = 0;
   sintheta = 0;
   theta_inverse = 0;
   w = 0;
   w_cross_pt = 0;
   tmp = 0;
   rot_cross_pt = 0;
   tmpca1 = rot .^ 2;
   sqtheta = sum(tmpca1);
   if sqtheta ~= 0
      theta = sqrt(sqtheta);
      costheta = cos(theta);
      sintheta = sin(theta);
      theta_inverse = 1. / theta;
      w = rot * theta_inverse;
      w_cross_pt = cross(w, pt);
      tmpca2 = w' * pt;
      tmpca1 = 1. - costheta;
      tmp = tmpca1 * tmpca2;
      tmpca3 = tmp * w;
      tmpca2 = sintheta * w_cross_pt;
      tmpca1 = costheta * pt;
      rotatedPt = tmpca1 + tmpca2 + tmpca3;
   else
      rot_cross_pt = cross(rot, pt);
      rotatedPt = pt + rot_cross_pt;
   end
end

function [a_kappa a_x nr_x] = a_radial_distort(kappa, x, a_x)
   tmpca1 = x .^ 2;
   sqr = sum(tmpca1);
   tmpca3 = kappa(2) * sqr;
   tmpca2 = tmpca3 * sqr;
   adimat_push1(tmpca1);
   tmpca1 = kappa(1) * sqr;
   L = 1 + tmpca1 + tmpca2;
   adimat_push1(x);
   x = x * L;
   nr_x = x;
   [a_sqr a_L a_tmpca1 a_tmpca2 a_tmpca3 a_kappa] = a_zeros(sqr, L, tmpca1, tmpca2, tmpca3, kappa);
   if nargin < 3
      a_x = a_zeros1(x);
   end
   x = adimat_pop1;
   a_L = adimat_adjsum(a_L, adimat_adjmultr(L, x, a_x));
   tmpsa1 = a_x;
   a_x = a_zeros1(x);
   a_x = adimat_adjsum(a_x, adimat_adjmultl(x, tmpsa1, L));
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_L));
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjred(tmpca2, a_L));
   tmpca1 = adimat_pop1;
   a_kappa(1) = adimat_adjsum(a_kappa(1), adimat_adjmultl(kappa(1), a_tmpca1, sqr));
   a_sqr = adimat_adjsum(a_sqr, adimat_adjmultr(sqr, kappa(1), a_tmpca1));
   a_tmpca1 = a_zeros1(tmpca1);
   a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjmultl(tmpca3, a_tmpca2, sqr));
   a_sqr = adimat_adjsum(a_sqr, adimat_adjmultr(sqr, tmpca3, a_tmpca2));
   a_kappa(2) = adimat_adjsum(a_kappa(2), adimat_adjmultl(kappa(2), a_tmpca3, sqr));
   a_sqr = adimat_adjsum(a_sqr, adimat_adjmultr(sqr, kappa(2), a_tmpca3));
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_sum(a_sqr, tmpca1));
   a_x = adimat_adjsum(a_x, adimat_adjred(x, 2 .* x.^1 .* a_tmpca1));
end

function x = rec_radial_distort(kappa, x)
   tmpca1 = x .^ 2;
   sqr = sum(tmpca1);
   tmpca3 = kappa(2) * sqr;
   tmpca2 = tmpca3 * sqr;
   adimat_push1(tmpca1);
   tmpca1 = kappa(1) * sqr;
   L = 1 + tmpca1 + tmpca2;
   adimat_push1(x);
   x = x * L;
   adimat_push(sqr, L, tmpca1, tmpca2, tmpca3, x, kappa, x);
end

function [a_kappa a_x] = ret_radial_distort(a_x)
   [x kappa x tmpca3 tmpca2 tmpca1 L sqr] = adimat_pop;
   [a_sqr a_L a_tmpca1 a_tmpca2 a_tmpca3 a_kappa] = a_zeros(sqr, L, tmpca1, tmpca2, tmpca3, kappa);
   if nargin < 1
      a_x = a_zeros1(x);
   end
   x = adimat_pop1;
   a_L = adimat_adjsum(a_L, adimat_adjmultr(L, x, a_x));
   tmpsa1 = a_x;
   a_x = a_zeros1(x);
   a_x = adimat_adjsum(a_x, adimat_adjmultl(x, tmpsa1, L));
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_L));
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjred(tmpca2, a_L));
   tmpca1 = adimat_pop1;
   a_kappa(1) = adimat_adjsum(a_kappa(1), adimat_adjmultl(kappa(1), a_tmpca1, sqr));
   a_sqr = adimat_adjsum(a_sqr, adimat_adjmultr(sqr, kappa(1), a_tmpca1));
   a_tmpca1 = a_zeros1(tmpca1);
   a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjmultl(tmpca3, a_tmpca2, sqr));
   a_sqr = adimat_adjsum(a_sqr, adimat_adjmultr(sqr, tmpca3, a_tmpca2));
   a_kappa(2) = adimat_adjsum(a_kappa(2), adimat_adjmultl(kappa(2), a_tmpca3, sqr));
   a_sqr = adimat_adjsum(a_sqr, adimat_adjmultr(sqr, kappa(2), a_tmpca3));
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_sum(a_sqr, tmpca1));
   a_x = adimat_adjsum(a_x, adimat_adjred(x, 2 .* x.^1 .* a_tmpca1));
end

function x = radial_distort(kappa, x)
   tmpca1 = x .^ 2;
   sqr = sum(tmpca1);
   tmpca3 = kappa(2) * sqr;
   tmpca2 = tmpca3 * sqr;
   tmpca1 = kappa(1) * sqr;
   L = 1 + tmpca1 + tmpca2;
   x = x * L;
end
