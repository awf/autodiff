% Copyright (c) Microsoft Corporation.
% Licensed under the MIT license.

% Generated by ADiMat 0.6.0-4975
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2015 Johannes Willkomm <johannes@johannes-willkomm.de>
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to adimat-users@lists.sc.informatik.tu-darmstadt.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Parameters:
%  - dependents=err
%  - independents=alphas, means, inv_cov_factors
%  - inputEncoding=ISO-8859-1
%
% Functions in this file: a_gmm_objective, rec_gmm_objective,
%  ret_gmm_objective, a_sqnorm, rec_sqnorm,
%  ret_sqnorm, sqnorm, a_log_wishart_prior,
%  rec_log_wishart_prior, ret_log_wishart_prior, log_wishart_prior,
%  log_gamma_distrib, a_logsumexp, rec_logsumexp,
%  ret_logsumexp
%

function [a_alphas a_means a_inv_cov_factors nr_err] = a_gmm_objective(alphas, means, inv_cov_factors, x, hparams, a_err)
% GMM_OBJECTIVE  Evaluate GMM negative log likelihood for one point
%             ALPHAS 
%                1 x k vector of logs of mixture weights (unnormalized), so
%                weights = exp(log_alphas)/sum(exp(log_alphas))
%             MEANS
%                d x k matrix of component means
%             INV_COV_FACTORS 
%                (d*(d+1)/2) x k matrix, parametrizing 
%                lower triangular square roots of inverse covariances
%                log of diagonal is first d params
%             X 
%               are data points (d x n vector)
%             HPARAMS
%                [gamma, m] wishart distribution parameters
%         Output ERR is the sum of errors over all points
%      To generate params given covariance C:
%           L = inv(chol(C,'lower'));
%           inv_cov_factor = [log(diag(L)); L(au_tril_indices(d,-1))]
   tmpca1 = 0;
   tmpda1 = 0;
   tmplia1 = 0;
   icf = 0;
   logLdiag = 0;
   main_term = 0;
   Qxcentered = 0;
   d = size(x, 1);
   k = size(alphas, 2);
   n = size(x, 2);
   lower_triangle_indices = tril(ones(d, d), -1) ~= 0;
   sum_qs = sum(inv_cov_factors(1 : d, :), 1);
   Qs = cell(1, k);
   Qdiags = zeros(d, k);
   tmpfra1_2 = k;
   for ik=1 : tmpfra1_2
      adimat_push1(icf);
      icf = inv_cov_factors(:, ik);
      adimat_push1(logLdiag);
      logLdiag = icf(1 : d);
      adimat_push1(tmplia1);
      tmplia1 = exp(logLdiag);
      adimat_push_index2(Qdiags, ':', ik);
      Qdiags(:, ik) = tmplia1;
      adimat_push1(tmplia1);
      tmplia1 = diag(Qdiags(:, ik));
      adimat_push_cell_index(Qs, ik);
      Qs{ik} = tmplia1;
      adimat_push1(tmpda1);
      tmpda1 = d + 1;
      adimat_push1(tmplia1);
      tmplia1 = icf(tmpda1 : end);
      adimat_push_index1(Qs{ik}, lower_triangle_indices);
      Qs{ik}(lower_triangle_indices) = tmplia1;
   end
   adimat_push1(tmpfra1_2);
   slse = 0;
   tmpfra1_2 = n;
   for ix=1 : tmpfra1_2
      adimat_push1(main_term);
      main_term = zeros(1, k);
      tmpfra2_2 = k;
      adimat_push1(ik);
      for ik=1 : tmpfra2_2
         adimat_push1(tmpca1);
         tmpca1 = x(:, ix) - means(:, ik);
         adimat_push1(Qxcentered);
         Qxcentered = Qs{ik} * tmpca1;
         adimat_push1(tmpca1);
         tmpca1 = rec_sqnorm(Qxcentered);
         adimat_push1(tmplia1);
         tmplia1 = -0.5 * tmpca1;
         adimat_push_index1(main_term, ik);
         main_term(ik) = tmplia1;
      end
      adimat_push(tmpfra2_2, main_term);
      main_term = main_term + alphas + sum_qs;
      adimat_push1(tmpca1);
      tmpca1 = rec_logsumexp(main_term);
      adimat_push1(slse);
      slse = slse + tmpca1;
   end
   adimat_push1(tmpfra1_2);
   constant = -n * d * 0.5 * log(2 * pi);
   tmpca2 = rec_logsumexp(alphas);
   adimat_push1(tmpca1);
   tmpca1 = n * tmpca2;
   err = constant + slse - tmpca1;
   adimat_push1(tmpca1);
   tmpca1 = rec_log_wishart_prior(hparams, d, sum_qs, Qdiags, inv_cov_factors);
   adimat_push1(err);
   err = err + tmpca1;
   nr_err = err;
   [a_sum_qs a_Qs a_Qdiags a_icf a_logLdiag a_slse a_main_term a_Qxcentered a_tmpca1 a_tmpca2 a_tmplia1 a_alphas a_means a_inv_cov_factors] = a_zeros(sum_qs, Qs, Qdiags, icf, logLdiag, slse, main_term, Qxcentered, tmpca1, tmpca2, tmplia1, alphas, means, inv_cov_factors);
   if nargin < 6
      a_err = a_zeros1(err);
   end
   err = adimat_pop1;
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_err));
   tmpsa1 = a_err;
   a_err = a_zeros1(err);
   a_err = adimat_adjsum(a_err, adimat_adjred(err, tmpsa1));
   [tmpadjc3 tmpadjc4 tmpadjc5] = ret_log_wishart_prior(a_tmpca1);
   tmpca1 = adimat_pop1;
   a_sum_qs = adimat_adjsum(a_sum_qs, tmpadjc3);
   a_Qdiags = adimat_adjsum(a_Qdiags, tmpadjc4);
   a_inv_cov_factors = adimat_adjsum(a_inv_cov_factors, tmpadjc5);
   a_tmpca1 = a_zeros1(tmpca1);
   a_slse = adimat_adjsum(a_slse, adimat_adjred(slse, a_err));
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, -a_err));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultr(tmpca2, n, a_tmpca1));
   a_tmpca1 = a_zeros1(tmpca1);
   [tmpadjc1] = ret_logsumexp(a_tmpca2);
   a_alphas = adimat_adjsum(a_alphas, tmpadjc1);
   tmpfra1_2 = adimat_pop1;
   for ix=fliplr(1 : tmpfra1_2)
      slse = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_slse));
      tmpsa1 = a_slse;
      a_slse = a_zeros1(slse);
      a_slse = adimat_adjsum(a_slse, adimat_adjred(slse, tmpsa1));
      [tmpadjc1] = ret_logsumexp(a_tmpca1);
      tmpca1 = adimat_pop1;
      a_main_term = adimat_adjsum(a_main_term, tmpadjc1);
      a_tmpca1 = a_zeros1(tmpca1);
      main_term = adimat_pop1;
      a_alphas = adimat_adjsum(a_alphas, adimat_adjred(alphas, a_main_term));
      a_sum_qs = adimat_adjsum(a_sum_qs, adimat_adjred(sum_qs, a_main_term));
      tmpsa1 = a_main_term;
      a_main_term = a_zeros1(main_term);
      a_main_term = adimat_adjsum(a_main_term, adimat_adjred(main_term, tmpsa1));
      tmpfra2_2 = adimat_pop1;
      for ik=fliplr(1 : tmpfra2_2)
         main_term = adimat_pop_index1(main_term, ik);
         a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_main_term(ik))));
         a_main_term = a_zeros_index1(a_main_term, main_term, ik);
         tmplia1 = adimat_pop1;
         a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultr(tmpca1, -0.5, a_tmplia1));
         a_tmplia1 = a_zeros1(tmplia1);
         [tmpadjc1] = ret_sqnorm(a_tmpca1);
         tmpca1 = adimat_pop1;
         a_Qxcentered = adimat_adjsum(a_Qxcentered, tmpadjc1);
         a_tmpca1 = a_zeros1(tmpca1);
         Qxcentered = adimat_pop1;
         a_Qs{ik} = adimat_adjsum(a_Qs{ik}, adimat_adjmultl(Qs{ik}, a_Qxcentered, tmpca1));
         a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultr(tmpca1, Qs{ik}, a_Qxcentered));
         a_Qxcentered = a_zeros1(Qxcentered);
         tmpca1 = adimat_pop1;
         a_means(:, ik) = adimat_adjsum(a_means(:, ik), adimat_adjred(means(:, ik), -a_tmpca1));
         a_tmpca1 = a_zeros1(tmpca1);
      end
      [ik main_term] = adimat_pop;
      a_main_term = a_zeros1(main_term);
   end
   tmpfra1_2 = adimat_pop1;
   for ik=fliplr(1 : tmpfra1_2)
      Qs{ik} = adimat_pop_index1(Qs{ik}, lower_triangle_indices);
      a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_Qs{ik}(lower_triangle_indices))));
      a_Qs{ik} = a_zeros_index1(a_Qs{ik}, Qs{ik}, lower_triangle_indices);
      tmplia1 = adimat_pop1;
      a_icf(tmpda1 : end) = adimat_adjsum(a_icf(tmpda1 : end), a_tmplia1);
      a_tmplia1 = a_zeros1(tmplia1);
      tmpda1 = adimat_pop1;
      Qs = adimat_pop_cell_index(Qs, ik);
      a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_Qs{ik})));
      a_Qs = a_zeros_cell_index(a_Qs, Qs, ik);
      tmplia1 = adimat_pop1;
      a_Qdiags(:, ik) = adimat_adjsum(a_Qdiags(:, ik), a_diag(a_tmplia1, Qdiags(:, ik)));
      a_tmplia1 = a_zeros1(tmplia1);
      Qdiags = adimat_pop_index2(Qdiags, ':', ik);
      a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_Qdiags(:, ik))));
      a_Qdiags = a_zeros_index2(a_Qdiags, Qdiags, ':', ik);
      tmplia1 = adimat_pop1;
      a_logLdiag = adimat_adjsum(a_logLdiag, exp(logLdiag) .* a_tmplia1);
      a_tmplia1 = a_zeros1(tmplia1);
      logLdiag = adimat_pop1;
      a_icf(1 : d) = adimat_adjsum(a_icf(1 : d), a_logLdiag);
      a_logLdiag = a_zeros1(logLdiag);
      icf = adimat_pop1;
      a_inv_cov_factors(:, ik) = adimat_adjsum(a_inv_cov_factors(:, ik), a_icf);
      a_icf = a_zeros1(icf);
   end
   a_inv_cov_factors(1 : d, :) = adimat_adjsum(a_inv_cov_factors(1 : d, :), a_sum(a_sum_qs, inv_cov_factors(1 : d, :), 1));
end

function err = rec_gmm_objective(alphas, means, inv_cov_factors, x, hparams)
   tmpca1 = 0;
   tmpda1 = 0;
   tmplia1 = 0;
   icf = 0;
   logLdiag = 0;
   main_term = 0;
   Qxcentered = 0;
   d = size(x, 1);
   k = size(alphas, 2);
   n = size(x, 2);
   lower_triangle_indices = tril(ones(d, d), -1) ~= 0;
   sum_qs = sum(inv_cov_factors(1 : d, :), 1);
   Qs = cell(1, k);
   Qdiags = zeros(d, k);
   tmpfra1_2 = k;
   for ik=1 : tmpfra1_2
      adimat_push1(icf);
      icf = inv_cov_factors(:, ik);
      adimat_push1(logLdiag);
      logLdiag = icf(1 : d);
      adimat_push1(tmplia1);
      tmplia1 = exp(logLdiag);
      adimat_push_index2(Qdiags, ':', ik);
      Qdiags(:, ik) = tmplia1;
      adimat_push1(tmplia1);
      tmplia1 = diag(Qdiags(:, ik));
      adimat_push_cell_index(Qs, ik);
      Qs{ik} = tmplia1;
      adimat_push1(tmpda1);
      tmpda1 = d + 1;
      adimat_push1(tmplia1);
      tmplia1 = icf(tmpda1 : end);
      adimat_push_index1(Qs{ik}, lower_triangle_indices);
      Qs{ik}(lower_triangle_indices) = tmplia1;
   end
   adimat_push1(tmpfra1_2);
   slse = 0;
   tmpfra1_2 = n;
   for ix=1 : tmpfra1_2
      adimat_push1(main_term);
      main_term = zeros(1, k);
      tmpfra2_2 = k;
      adimat_push1(ik);
      for ik=1 : tmpfra2_2
         adimat_push1(tmpca1);
         tmpca1 = x(:, ix) - means(:, ik);
         adimat_push1(Qxcentered);
         Qxcentered = Qs{ik} * tmpca1;
         adimat_push1(tmpca1);
         tmpca1 = rec_sqnorm(Qxcentered);
         adimat_push1(tmplia1);
         tmplia1 = -0.5 * tmpca1;
         adimat_push_index1(main_term, ik);
         main_term(ik) = tmplia1;
      end
      adimat_push(tmpfra2_2, main_term);
      main_term = main_term + alphas + sum_qs;
      adimat_push1(tmpca1);
      tmpca1 = rec_logsumexp(main_term);
      adimat_push1(slse);
      slse = slse + tmpca1;
   end
   adimat_push1(tmpfra1_2);
   constant = -n * d * 0.5 * log(2 * pi);
   tmpca2 = rec_logsumexp(alphas);
   adimat_push1(tmpca1);
   tmpca1 = n * tmpca2;
   err = constant + slse - tmpca1;
   adimat_push1(tmpca1);
   tmpca1 = rec_log_wishart_prior(hparams, d, sum_qs, Qdiags, inv_cov_factors);
   adimat_push1(err);
   err = err + tmpca1;
   adimat_push(d, k, n, lower_triangle_indices, sum_qs, Qs, Qdiags, ik, icf, logLdiag, slse, ix, main_term, Qxcentered, constant, tmpca1, tmpca2, tmpda1, tmplia1, err, alphas, means, inv_cov_factors);
   if nargin > 3
      adimat_push1(x);
   end
   if nargin > 4
      adimat_push1(hparams);
   end
   adimat_push1(nargin);
end

function [a_alphas a_means a_inv_cov_factors] = ret_gmm_objective(a_err)
   tmpnargin = adimat_pop1;
   if tmpnargin > 4
      hparams = adimat_pop1;
   end
   if tmpnargin > 3
      x = adimat_pop1;
   end
   [inv_cov_factors means alphas err tmplia1 tmpda1 tmpca2 tmpca1 constant Qxcentered main_term ix slse logLdiag icf ik Qdiags Qs sum_qs lower_triangle_indices n k d] = adimat_pop;
   [a_sum_qs a_Qs a_Qdiags a_icf a_logLdiag a_slse a_main_term a_Qxcentered a_tmpca1 a_tmpca2 a_tmplia1 a_alphas a_means a_inv_cov_factors] = a_zeros(sum_qs, Qs, Qdiags, icf, logLdiag, slse, main_term, Qxcentered, tmpca1, tmpca2, tmplia1, alphas, means, inv_cov_factors);
   if nargin < 1
      a_err = a_zeros1(err);
   end
   err = adimat_pop1;
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_err));
   tmpsa1 = a_err;
   a_err = a_zeros1(err);
   a_err = adimat_adjsum(a_err, adimat_adjred(err, tmpsa1));
   [tmpadjc3 tmpadjc4 tmpadjc5] = ret_log_wishart_prior(a_tmpca1);
   tmpca1 = adimat_pop1;
   a_sum_qs = adimat_adjsum(a_sum_qs, tmpadjc3);
   a_Qdiags = adimat_adjsum(a_Qdiags, tmpadjc4);
   a_inv_cov_factors = adimat_adjsum(a_inv_cov_factors, tmpadjc5);
   a_tmpca1 = a_zeros1(tmpca1);
   a_slse = adimat_adjsum(a_slse, adimat_adjred(slse, a_err));
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, -a_err));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultr(tmpca2, n, a_tmpca1));
   a_tmpca1 = a_zeros1(tmpca1);
   [tmpadjc1] = ret_logsumexp(a_tmpca2);
   a_alphas = adimat_adjsum(a_alphas, tmpadjc1);
   tmpfra1_2 = adimat_pop1;
   for ix=fliplr(1 : tmpfra1_2)
      slse = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_slse));
      tmpsa1 = a_slse;
      a_slse = a_zeros1(slse);
      a_slse = adimat_adjsum(a_slse, adimat_adjred(slse, tmpsa1));
      [tmpadjc1] = ret_logsumexp(a_tmpca1);
      tmpca1 = adimat_pop1;
      a_main_term = adimat_adjsum(a_main_term, tmpadjc1);
      a_tmpca1 = a_zeros1(tmpca1);
      main_term = adimat_pop1;
      a_alphas = adimat_adjsum(a_alphas, adimat_adjred(alphas, a_main_term));
      a_sum_qs = adimat_adjsum(a_sum_qs, adimat_adjred(sum_qs, a_main_term));
      tmpsa1 = a_main_term;
      a_main_term = a_zeros1(main_term);
      a_main_term = adimat_adjsum(a_main_term, adimat_adjred(main_term, tmpsa1));
      tmpfra2_2 = adimat_pop1;
      for ik=fliplr(1 : tmpfra2_2)
         main_term = adimat_pop_index1(main_term, ik);
         a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_main_term(ik))));
         a_main_term = a_zeros_index1(a_main_term, main_term, ik);
         tmplia1 = adimat_pop1;
         a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultr(tmpca1, -0.5, a_tmplia1));
         a_tmplia1 = a_zeros1(tmplia1);
         [tmpadjc1] = ret_sqnorm(a_tmpca1);
         tmpca1 = adimat_pop1;
         a_Qxcentered = adimat_adjsum(a_Qxcentered, tmpadjc1);
         a_tmpca1 = a_zeros1(tmpca1);
         Qxcentered = adimat_pop1;
         a_Qs{ik} = adimat_adjsum(a_Qs{ik}, adimat_adjmultl(Qs{ik}, a_Qxcentered, tmpca1));
         a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultr(tmpca1, Qs{ik}, a_Qxcentered));
         a_Qxcentered = a_zeros1(Qxcentered);
         tmpca1 = adimat_pop1;
         a_means(:, ik) = adimat_adjsum(a_means(:, ik), adimat_adjred(means(:, ik), -a_tmpca1));
         a_tmpca1 = a_zeros1(tmpca1);
      end
      [ik main_term] = adimat_pop;
      a_main_term = a_zeros1(main_term);
   end
   tmpfra1_2 = adimat_pop1;
   for ik=fliplr(1 : tmpfra1_2)
      Qs{ik} = adimat_pop_index1(Qs{ik}, lower_triangle_indices);
      a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_Qs{ik}(lower_triangle_indices))));
      a_Qs{ik} = a_zeros_index1(a_Qs{ik}, Qs{ik}, lower_triangle_indices);
      tmplia1 = adimat_pop1;
      a_icf(tmpda1 : end) = adimat_adjsum(a_icf(tmpda1 : end), a_tmplia1);
      a_tmplia1 = a_zeros1(tmplia1);
      tmpda1 = adimat_pop1;
      Qs = adimat_pop_cell_index(Qs, ik);
      a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_Qs{ik})));
      a_Qs = a_zeros_cell_index(a_Qs, Qs, ik);
      tmplia1 = adimat_pop1;
      a_Qdiags(:, ik) = adimat_adjsum(a_Qdiags(:, ik), a_diag(a_tmplia1, Qdiags(:, ik)));
      a_tmplia1 = a_zeros1(tmplia1);
      Qdiags = adimat_pop_index2(Qdiags, ':', ik);
      a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_Qdiags(:, ik))));
      a_Qdiags = a_zeros_index2(a_Qdiags, Qdiags, ':', ik);
      tmplia1 = adimat_pop1;
      a_logLdiag = adimat_adjsum(a_logLdiag, exp(logLdiag) .* a_tmplia1);
      a_tmplia1 = a_zeros1(tmplia1);
      logLdiag = adimat_pop1;
      a_icf(1 : d) = adimat_adjsum(a_icf(1 : d), a_logLdiag);
      a_logLdiag = a_zeros1(logLdiag);
      icf = adimat_pop1;
      a_inv_cov_factors(:, ik) = adimat_adjsum(a_inv_cov_factors(:, ik), a_icf);
      a_icf = a_zeros1(icf);
   end
   a_inv_cov_factors(1 : d, :) = adimat_adjsum(a_inv_cov_factors(1 : d, :), a_sum(a_sum_qs, inv_cov_factors(1 : d, :), 1));
end

function [a_x nr_out] = a_sqnorm(x, a_out)
   tmpca1 = x .^ 2;
   out = sum(tmpca1, 1);
   nr_out = out;
   [a_tmpca1 a_x] = a_zeros(tmpca1, x);
   if nargin < 2
      a_out = a_zeros1(out);
   end
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_sum(a_out, tmpca1, 1));
   a_x = adimat_adjsum(a_x, adimat_adjred(x, 2 .* x.^1 .* a_tmpca1));
end

function out = rec_sqnorm(x)
   tmpca1 = x .^ 2;
   out = sum(tmpca1, 1);
   adimat_push(tmpca1, out, x);
end

function a_x = ret_sqnorm(a_out)
   [x out tmpca1] = adimat_pop;
   [a_tmpca1 a_x] = a_zeros(tmpca1, x);
   if nargin < 1
      a_out = a_zeros1(out);
   end
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_sum(a_out, tmpca1, 1));
   a_x = adimat_adjsum(a_x, adimat_adjred(x, 2 .* x.^1 .* a_tmpca1));
end

function out = sqnorm(x)
   tmpca1 = x .^ 2;
   out = sum(tmpca1, 1);
end

function [a_sum_qs a_Qdiags a_inv_cov_factors nr_out] = a_log_wishart_prior(hparams, p, sum_qs, Qdiags, inv_cov_factors, a_out)
% LOG_WISHART_PRIOR  
%               HPARAMS = [gamma m]
%               P data dimension
%             INV_COV_FACTORS
%                (d*(d+1)/2) x k matrix, parametrizing 
%                lower triangular square roots of inverse covariances
%                log of diagonal is first d params
   gamma = hparams(1);
   m = hparams(2);
   n = p + m + 1;
   tmpda6 = p + 1;
   tmpca5 = rec_sqnorm(inv_cov_factors(tmpda6 : end, :));
   tmpca4 = rec_sqnorm(Qdiags);
   tmpca3 = tmpca4 + tmpca5;
   tmpda2 = gamma ^ 2;
   tmpda1 = 0.5 * tmpda2;
   term1 = tmpda1 * tmpca3;
   term2 = m * sum_qs;
   C = n*p*(log(gamma) - 0.5*log(2)) - log_gamma_distrib(0.5 * n, p);
   tmpca1 = term1 - term2 - C;
   out = sum(tmpca1);
   nr_out = out;
   [a_term1 a_term2 a_tmpca1 a_tmpca3 a_tmpca4 a_tmpca5 a_sum_qs a_Qdiags a_inv_cov_factors] = a_zeros(term1, term2, tmpca1, tmpca3, tmpca4, tmpca5, sum_qs, Qdiags, inv_cov_factors);
   if nargin < 6
      a_out = a_zeros1(out);
   end
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_sum(a_out, tmpca1));
   a_term1 = adimat_adjsum(a_term1, adimat_adjred(term1, a_tmpca1));
   a_term2 = adimat_adjsum(a_term2, adimat_adjred(term2, -a_tmpca1));
   a_sum_qs = adimat_adjsum(a_sum_qs, adimat_adjmultr(sum_qs, m, a_term2));
   a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjmultr(tmpca3, tmpda1, a_term1));
   a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjred(tmpca4, a_tmpca3));
   a_tmpca5 = adimat_adjsum(a_tmpca5, adimat_adjred(tmpca5, a_tmpca3));
   [tmpadjc1] = ret_sqnorm(a_tmpca4);
   a_Qdiags = adimat_adjsum(a_Qdiags, tmpadjc1);
   [tmpadjc1] = ret_sqnorm(a_tmpca5);
   a_inv_cov_factors(tmpda6 : end, :) = adimat_adjsum(a_inv_cov_factors(tmpda6 : end, :), tmpadjc1);
end

function out = rec_log_wishart_prior(hparams, p, sum_qs, Qdiags, inv_cov_factors)
   gamma = hparams(1);
   m = hparams(2);
   n = p + m + 1;
   tmpda6 = p + 1;
   tmpca5 = rec_sqnorm(inv_cov_factors(tmpda6 : end, :));
   tmpca4 = rec_sqnorm(Qdiags);
   tmpca3 = tmpca4 + tmpca5;
   tmpda2 = gamma ^ 2;
   tmpda1 = 0.5 * tmpda2;
   term1 = tmpda1 * tmpca3;
   term2 = m * sum_qs;
   C = n*p*(log(gamma) - 0.5*log(2)) - log_gamma_distrib(0.5 * n, p);
   tmpca1 = term1 - term2 - C;
   out = sum(tmpca1);
   adimat_push(gamma, m, n, term1, term2, C, tmpca1, tmpca3, tmpca4, tmpca5, tmpda1, tmpda2, tmpda6, out, hparams, p, sum_qs, Qdiags, inv_cov_factors);
end

function [a_sum_qs a_Qdiags a_inv_cov_factors] = ret_log_wishart_prior(a_out)
   [inv_cov_factors Qdiags sum_qs p hparams out tmpda6 tmpda2 tmpda1 tmpca5 tmpca4 tmpca3 tmpca1 C term2 term1 n m gamma] = adimat_pop;
   [a_term1 a_term2 a_tmpca1 a_tmpca3 a_tmpca4 a_tmpca5 a_sum_qs a_Qdiags a_inv_cov_factors] = a_zeros(term1, term2, tmpca1, tmpca3, tmpca4, tmpca5, sum_qs, Qdiags, inv_cov_factors);
   if nargin < 1
      a_out = a_zeros1(out);
   end
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_sum(a_out, tmpca1));
   a_term1 = adimat_adjsum(a_term1, adimat_adjred(term1, a_tmpca1));
   a_term2 = adimat_adjsum(a_term2, adimat_adjred(term2, -a_tmpca1));
   a_sum_qs = adimat_adjsum(a_sum_qs, adimat_adjmultr(sum_qs, m, a_term2));
   a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjmultr(tmpca3, tmpda1, a_term1));
   a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjred(tmpca4, a_tmpca3));
   a_tmpca5 = adimat_adjsum(a_tmpca5, adimat_adjred(tmpca5, a_tmpca3));
   [tmpadjc1] = ret_sqnorm(a_tmpca4);
   a_Qdiags = adimat_adjsum(a_Qdiags, tmpadjc1);
   [tmpadjc1] = ret_sqnorm(a_tmpca5);
   a_inv_cov_factors(tmpda6 : end, :) = adimat_adjsum(a_inv_cov_factors(tmpda6 : end, :), tmpadjc1);
end

function out = log_wishart_prior(hparams, p, sum_qs, Qdiags, inv_cov_factors)
% LOG_WISHART_PRIOR  
%               HPARAMS = [gamma m]
%               P data dimension
%             INV_COV_FACTORS
%                (d*(d+1)/2) x k matrix, parametrizing 
%                lower triangular square roots of inverse covariances
%                log of diagonal is first d params
   gamma = hparams(1);
   m = hparams(2);
   n = p + m + 1;
   tmpda6 = p + 1;
   tmpca5 = sqnorm(inv_cov_factors(tmpda6 : end, :));
   tmpca4 = sqnorm(Qdiags);
   tmpca3 = tmpca4 + tmpca5;
   tmpda2 = gamma ^ 2;
   tmpda1 = 0.5 * tmpda2;
   term1 = tmpda1 * tmpca3;
   term2 = m * sum_qs;
   C = n*p*(log(gamma) - 0.5*log(2)) - log_gamma_distrib(0.5 * n, p);
   tmpca1 = term1 - term2 - C;
   out = sum(tmpca1);
end

function out = log_gamma_distrib(a, p)
   out = 0.25 * p * (p - 1) * log(pi);
   for j=1 : p
      out = out + gammaln(a + 0.5*(1 - j));
   end
end

function [a_x nr_out] = a_logsumexp(x, a_out)
% LOGSUMEXP  Compute log(sum(exp(x))) stably.
%               X is k x n
%               OUT is 1 x n
   mx = max(x);
   tmpca1 = x - mx;
   emx = exp(tmpca1);
   semx = sum(emx);
   adimat_push1(tmpca1);
   tmpca1 = log(semx);
   out = tmpca1 + mx;
   nr_out = out;
   [a_mx a_emx a_semx a_tmpca1 a_x] = a_zeros(mx, emx, semx, tmpca1, x);
   if nargin < 2
      a_out = a_zeros1(out);
   end
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_out));
   a_mx = adimat_adjsum(a_mx, adimat_adjred(mx, a_out));
   tmpca1 = adimat_pop1;
   a_semx = adimat_adjsum(a_semx, a_tmpca1 ./ semx);
   a_tmpca1 = a_zeros1(tmpca1);
   a_emx = adimat_adjsum(a_emx, a_sum(a_semx, emx));
   a_tmpca1 = adimat_adjsum(a_tmpca1, exp(tmpca1) .* a_emx);
   a_x = adimat_adjsum(a_x, adimat_adjred(x, a_tmpca1));
   a_mx = adimat_adjsum(a_mx, adimat_adjred(mx, -a_tmpca1));
   a_x = adimat_adjsum(a_x, adimat_max1(x, a_mx));
end

function out = rec_logsumexp(x)
   mx = max(x);
   tmpca1 = x - mx;
   emx = exp(tmpca1);
   semx = sum(emx);
   adimat_push1(tmpca1);
   tmpca1 = log(semx);
   out = tmpca1 + mx;
   adimat_push(mx, emx, semx, tmpca1, out, x);
end

function a_x = ret_logsumexp(a_out)
   [x out tmpca1 semx emx mx] = adimat_pop;
   [a_mx a_emx a_semx a_tmpca1 a_x] = a_zeros(mx, emx, semx, tmpca1, x);
   if nargin < 1
      a_out = a_zeros1(out);
   end
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_out));
   a_mx = adimat_adjsum(a_mx, adimat_adjred(mx, a_out));
   tmpca1 = adimat_pop1;
   a_semx = adimat_adjsum(a_semx, a_tmpca1 ./ semx);
   a_tmpca1 = a_zeros1(tmpca1);
   a_emx = adimat_adjsum(a_emx, a_sum(a_semx, emx));
   a_tmpca1 = adimat_adjsum(a_tmpca1, exp(tmpca1) .* a_emx);
   a_x = adimat_adjsum(a_x, adimat_adjred(x, a_tmpca1));
   a_mx = adimat_adjsum(a_mx, adimat_adjred(mx, -a_tmpca1));
   a_x = adimat_adjsum(a_x, adimat_max1(x, a_mx));
end
